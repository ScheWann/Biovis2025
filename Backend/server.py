from flask import Flask, request, jsonify, send_file
from process import SAMPLES
from flask_cors import CORS
import re
import os
from process import (
    get_samples_option,
    get_hires_image_size,
    get_coordinates,
    get_gene_list,
    get_cell_types_data,
    get_kosara_data,
    get_selected_region_data,
    get_umap_data,
    perform_go_analysis,
    get_trajectory_data,
    get_highly_variable_genes,
    get_trajectory_gene_list,
    load_adata_to_cache,
    clear_adata_cache,
    get_pseudotime_data,
    get_trajectory_gene_expression,
)


app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = "../Uploaded_Data"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

cell_ids = [
  "40211",
  "40215",
  "40223",
  "40227",
  "40229",
  "40234",
  "40236",
  "40244",
  "40245",
  "40249",
  "40250",
  "40255",
  "40258",
  "40267",
  "40269",
  "40273",
  "40282",
  "40286",
  "40290",
  "40293",
  "40298",
  "40301",
  "40304",
  "40309",
  "40311",
  "40315",
  "40329",
  "40337",
  "40345",
  "40347",
  "40348",
  "40349",
  "40351",
  "40355",
  "40362",
  "40366",
  "40369",
  "40373",
  "40374",
  "40376",
  "40381",
  "40387",
  "40390",
  "40391",
  "40394",
  "40395",
  "40404",
  "40420",
  "40424",
  "40426",
  "40430",
  "40432",
  "40437",
  "40444",
  "40447",
  "40448",
  "40449",
  "40459",
  "40464",
  "40472",
  "40476",
  "40479",
  "40504",
  "40506",
  "40507",
  "40510",
  "40513",
  "40514",
  "40524",
  "40527",
  "40529",
  "40530",
  "40539",
  "40540",
  "40546",
  "40550",
  "40552",
  "40555",
  "40559",
  "40560",
  "40568",
  "40573",
  "40581",
  "40591",
  "40592",
  "40605",
  "40609",
  "40612",
  "40613",
  "40624",
  "40633",
  "40639",
  "40642",
  "40643",
  "40644",
  "40645",
  "40649",
  "40663",
  "40667",
  "40669",
  "40680",
  "40689",
  "40690",
  "40691",
  "40693",
  "40696",
  "40697",
  "40706",
  "40711",
  "40713",
  "40715",
  "40718",
  "40722",
  "40723",
  "40727",
  "40732",
  "40733",
  "40736",
  "40739",
  "40742",
  "40749",
  "40750",
  "40751",
  "40758",
  "40763",
  "40767",
  "40769",
  "40778",
  "40779",
  "40781",
  "40787",
  "40788",
  "40794",
  "40797",
  "40798",
  "40803",
  "40806",
  "40807",
  "40808",
  "40812",
  "40814",
  "40815",
  "40818",
  "40839",
  "40841",
  "40852",
  "40864",
  "40872",
  "40875",
  "40877",
  "40878",
  "40879",
  "40881",
  "40888",
  "40897",
  "40902",
  "40903",
  "40904",
  "40912",
  "40913",
  "40918",
  "40921",
  "40923",
  "40924",
  "40930",
  "40931",
  "40944",
  "40947",
  "40951",
  "40961",
  "40968",
  "40970",
  "40972",
  "40975",
  "40979",
  "40981",
  "40987",
  "40993",
  "41003",
  "41005",
  "41014",
  "41024",
  "41026",
  "41031",
  "41033",
  "41038",
  "41041",
  "41044",
  "41051",
  "41053",
  "41062",
  "41066",
  "41072",
  "41073",
  "41075",
  "41076",
  "41079",
  "41095",
  "41096",
  "41097",
  "41103",
  "41106",
  "41107",
  "41109",
  "41113",
  "41122",
  "41127",
  "41136",
  "41137",
  "41146",
  "41161",
  "41163",
  "41165",
  "41171",
  "41173",
  "41175",
  "41180",
  "41193",
  "41194",
  "41206",
  "41207",
  "41212",
  "41216",
  "41220",
  "41223",
  "41224",
  "41231",
  "41238",
  "41244",
  "41246",
  "41247",
  "41253",
  "41261",
  "41263",
  "41268",
  "41270",
  "41273",
  "41276",
  "41277",
  "41278",
  "41279",
  "41286",
  "41288",
  "41301",
  "41314",
  "41324",
  "41325",
  "41330",
  "41334",
  "41342",
  "41347",
  "41350",
  "41354",
  "41362",
  "41366",
  "41372",
  "41385",
  "41386",
  "41394",
  "41397",
  "41402",
  "41405",
  "41407",
  "41409",
  "41411",
  "41414",
  "41421",
  "41423",
  "41424",
  "41427",
  "41430",
  "41434",
  "41442",
  "41445",
  "41455",
  "41458",
  "41459",
  "41468",
  "41474",
  "41477",
  "41480",
  "41483",
  "41499",
  "41502",
  "41503",
  "41509",
  "41525",
  "41528",
  "41530",
  "41534",
  "41540",
  "41548",
  "41549",
  "41550",
  "41555",
  "41558",
  "41566",
  "41568",
  "41569",
  "41578",
  "41581",
  "41582",
  "41583",
  "41588",
  "41597",
  "41598",
  "41599",
  "41600",
  "41605",
  "41606",
  "41613",
  "41625",
  "41629",
  "41630",
  "41632",
  "41645",
  "41647",
  "41657",
  "41662",
  "41663",
  "41665",
  "41667",
  "41670",
  "41679",
  "41700",
  "41706",
  "41708",
  "41711",
  "41713",
  "41721",
  "41723",
  "41725",
  "41740",
  "41741",
  "41743",
  "41744",
  "41747",
  "41753",
  "41754",
  "41755",
  "41757",
  "41760",
  "41768",
  "41769",
  "41770",
  "41782",
  "41786",
  "41791",
  "41797",
  "41812",
  "41822",
  "41823",
  "41825",
  "41828",
  "41832",
  "41833",
  "41834",
  "41844",
  "41855",
  "41863",
  "41868",
  "41870",
  "41885",
  "41888",
  "41891",
  "41895",
  "41896",
  "41899",
  "41902",
  "41904",
  "41912",
  "41913",
  "41920",
  "41924",
  "41927",
  "41931",
  "41937",
  "41945",
  "41947",
  "41951",
  "41954",
  "41961",
  "41975",
  "41977",
  "41979",
  "41989",
  "41990",
  "41992",
  "41993",
  "41994",
  "42001",
  "42004",
  "42006",
  "42008",
  "42011",
  "42023",
  "42026",
  "42027",
  "42044",
  "42047",
  "42050",
  "42052",
  "42059",
  "42060",
  "42061",
  "42068",
  "42071",
  "42078",
  "42085",
  "42086",
  "42088",
  "42094",
  "42097",
  "42103",
  "42114",
  "42125",
  "42127",
  "42128",
  "42133",
  "42135",
  "42138",
  "42145",
  "42165",
  "42179",
  "42183",
  "42195",
  "42202",
  "42203",
  "42206",
  "42214",
  "42215",
  "42218",
  "42225",
  "42226",
  "42241",
  "42246",
  "42251",
  "42253",
  "42255",
  "42264",
  "42278",
  "42279",
  "42280",
  "42282",
  "42288",
  "42292",
  "42296",
  "42297",
  "42302",
  "42313",
  "42328",
  "42330",
  "42335",
  "42338",
  "42342",
  "42359",
  "42372",
  "42373",
  "42376",
  "42382",
  "42389",
  "42393",
  "42409",
  "42412",
  "42418",
  "42439",
  "42440",
  "42445",
  "42449",
  "42453",
  "42476",
  "42488",
  "42489",
  "42491",
  "42498",
  "42503",
  "42504",
  "42505",
  "42508",
  "42516",
  "42523",
  "42525",
  "42526",
  "42527",
  "42531",
  "42540",
  "42541",
  "42544",
  "42546",
  "42554",
  "42561",
  "42572",
  "42582",
  "42584",
  "42587",
  "42599",
  "42605",
  "42608",
  "42616",
  "42623",
  "42625",
  "42630",
  "42633",
  "42638",
  "42642",
  "42643",
  "42648",
  "42650",
  "42655",
  "42666",
  "42676",
  "42679",
  "42698",
  "42701",
  "42705",
  "42711",
  "42720",
  "42723",
  "42724",
  "42741",
  "42754",
  "42769",
  "42781",
  "42782",
  "42783",
  "42791",
  "42795",
  "42798",
  "42806",
  "42817",
  "42820",
  "42822",
  "42823",
  "42826",
  "42827",
  "42834",
  "42837",
  "42839",
  "42850",
  "42861",
  "42866",
  "42878",
  "42879",
  "42885",
  "42889",
  "42897",
  "42909",
  "42917",
  "42918",
  "42928",
  "42939",
  "42955",
  "42959",
  "42962",
  "42965",
  "42976",
  "42983",
  "42985",
  "42992",
  "42999",
  "43010",
  "43011",
  "43019",
  "43022",
  "43028",
  "43037",
  "43040",
  "43042",
  "43045",
  "43049",
  "43051",
  "43057",
  "43059",
  "43071",
  "43072",
  "43074",
  "43075",
  "43080",
  "43100",
  "43121",
  "43125",
  "43132",
  "43143",
  "43146",
  "43171",
  "43180",
  "43185",
  "43188",
  "43190",
  "43192",
  "43205",
  "43207",
  "43215",
  "43216",
  "43221",
  "43229",
  "43238",
  "43245",
  "43257",
  "43258",
  "43261",
  "43267",
  "43268",
  "43272",
  "43285",
  "43290",
  "43295",
  "43298",
  "43299",
  "43301",
  "43304",
  "43319",
  "43324",
  "43333",
  "43341",
  "43348",
  "43356",
  "43357",
  "43373",
  "43383",
  "43388",
  "43390",
  "43392",
  "43399",
  "43403",
  "43404",
  "43405",
  "43406",
  "43407",
  "43408",
  "43419",
  "43426",
  "43427",
  "43438",
  "43439",
  "43444",
  "43447",
  "43456",
  "43461",
  "43462",
  "43464",
  "43482",
  "43486",
  "43488",
  "43493",
  "43511",
  "43515",
  "43525",
  "43528",
  "43538",
  "43546",
  "43548",
  "43553",
  "43557",
  "43558",
  "43565",
  "43571",
  "43574",
  "43576",
  "43584",
  "43586",
  "43590",
  "43591",
  "43597",
  "43598",
  "43600",
  "43601",
  "43605",
  "43606",
  "43608",
  "43610",
  "43622",
  "43629",
  "43637",
  "43641",
  "43652",
  "43657",
  "43662",
  "43679",
  "43680",
  "43686",
  "43687",
  "43690",
  "43698",
  "43707",
  "43714",
  "43716",
  "43719",
  "43721",
  "43723",
  "43724",
  "43725",
  "43737",
  "43738",
  "43739",
  "43744",
  "43750",
  "43755",
  "43758",
  "43759",
  "43762",
  "43764",
  "43765",
  "43767",
  "43768",
  "43772",
  "43781",
  "43797",
  "43804",
  "43806",
  "43811",
  "43817",
  "43818",
  "43820",
  "43823",
  "43824",
  "43828",
  "43837",
  "43839",
  "43849",
  "43850",
  "43858",
  "43872",
  "43876",
  "43878",
  "43880",
  "43887",
  "43896",
  "43897",
  "43900",
  "43905",
  "43907",
  "43911",
  "43916",
  "43920",
  "43923",
  "43931",
  "43933",
  "43934",
  "43938",
  "43940",
  "43943",
  "43947",
  "43949",
  "43954",
  "43968",
  "43974",
  "43979",
  "43987",
  "43991",
  "44008",
  "44017",
  "44034",
  "44036",
  "44042",
  "44044",
  "44049",
  "44053",
  "44054",
  "44057",
  "44058",
  "44060",
  "44061",
  "44067",
  "44068",
  "44080",
  "44084",
  "44090",
  "44091",
  "44092",
  "44105",
  "44106",
  "44111",
  "44113",
  "44117",
  "44119",
  "44121",
  "44122",
  "44125",
  "44132",
  "44146",
  "44149",
  "44150",
  "44154",
  "44160",
  "44175",
  "44183",
  "44184",
  "44190",
  "44192",
  "44194",
  "44196",
  "44198",
  "44201",
  "44213",
  "44219",
  "44228",
  "44233",
  "44236",
  "44237",
  "44240",
  "44244",
  "44246",
  "44254",
  "44257",
  "44261",
  "44264",
  "44269",
  "44272",
  "44299",
  "44301",
  "44305",
  "44313",
  "44319",
  "44329",
  "44339",
  "44340",
  "44342",
  "44346",
  "44365",
  "44366",
  "44367",
  "44373",
  "44378",
  "44387",
  "44389",
  "44391",
  "44392",
  "44437",
  "44464",
  "44467",
  "44475",
  "44482",
  "44484",
  "44489",
  "44491",
  "44492",
  "44494",
  "44498",
  "44499",
  "44508",
  "44516",
  "44532",
  "44536",
  "44541",
  "44546",
  "44547",
  "44562",
  "44563",
  "44565",
  "44566",
  "44568",
  "44583",
  "44594",
  "44597",
  "44600",
  "44601",
  "44620",
  "44639",
  "44646",
  "44647",
  "44650",
  "44654",
  "44655",
  "44658",
  "44665",
  "44680",
  "44682",
  "44698",
  "44699",
  "44703",
  "44726",
  "44736",
  "44742",
  "44744",
  "44748",
  "44758",
  "44760",
  "44762",
  "44770",
  "44773",
  "44776",
  "44779",
  "44780",
  "44781",
  "44785",
  "44787",
  "44795",
  "44799",
  "44804",
  "44807",
  "44809",
  "44812",
  "44819",
  "44821",
  "44830",
  "44832",
  "44838",
  "44850",
  "44851",
  "44858",
  "44861",
  "44876",
  "44877",
  "44890",
  "44893",
  "44900",
  "44906",
  "44924",
  "44936",
  "44939",
  "44941",
  "44954",
  "44957",
  "44959",
  "44964",
  "44969",
  "44978",
  "44980",
  "44984",
  "44993",
  "45002",
  "45004",
  "45006",
  "45026",
  "45028",
  "45046",
  "45050",
  "45051",
  "45058",
  "45061",
  "45064",
  "45068",
  "45071",
  "45076",
  "45086",
  "45090",
  "45096",
  "45097",
  "45109",
  "45132",
  "45133",
  "45134",
  "45138",
  "45149",
  "45150",
  "45167",
  "45174",
  "45180",
  "45196",
  "45216",
  "45228",
  "45229",
  "45236",
  "45244",
  "45257",
  "45262",
  "45265",
  "45267",
  "45273",
  "45285",
  "45291",
  "45293",
  "45294",
  "45309",
  "45311",
  "45314",
  "45315",
  "45316",
  "45321",
  "45332",
  "45334",
  "45344",
  "45350",
  "45354",
  "45367",
  "45377",
  "45387",
  "45389",
  "45404",
  "45405",
  "45408",
  "45409",
  "45413",
  "45427",
  "45432",
  "45437",
  "45441",
  "45459",
  "45460",
  "45463",
  "45466",
  "45468",
  "45471",
  "45491",
  "45493",
  "45494",
  "45498",
  "45499",
  "45507",
  "45511",
  "45517",
  "45523",
  "45544",
  "45547",
  "45555",
  "45570",
  "45573",
  "45574",
  "45613",
  "45619",
  "45626",
  "45627",
  "45630",
  "45631",
  "45633",
  "45638",
  "45641",
  "45647",
  "45648",
  "45655",
  "45667",
  "45676",
  "45685",
  "45699",
  "45711",
  "45718",
  "45720",
  "45729",
  "45756",
  "45763",
  "45767",
  "45771",
  "45792",
  "45802",
  "45809",
  "45814",
  "45815",
  "45828",
  "45829",
  "45833",
  "45842",
  "45847",
  "45852",
  "45855",
  "45864",
  "45882",
  "45888",
  "45889",
  "45896",
  "45942",
  "45943",
  "45944",
  "45950",
  "45963",
  "45964",
  "45969",
  "45980",
  "45995",
  "45996",
  "46001",
  "46003",
  "46009",
  "46015",
  "46029",
  "46032",
  "46035",
  "46043",
  "46045",
  "46048",
  "46051",
  "46052",
  "46055",
  "46073",
  "46077",
  "46080",
  "46085",
  "46089",
  "46091",
  "46097",
  "46100",
  "46106",
  "46126",
  "46136",
  "46138",
  "46146",
  "46152",
  "46174",
  "46194",
  "46209",
  "46212",
  "46222",
  "46231",
  "46236",
  "46242",
  "46249",
  "46259",
  "46260",
  "46263",
  "46268",
  "46270",
  "46276",
  "46285",
  "46292",
  "46304",
  "46316",
  "46351",
  "46359",
  "46360",
  "46372",
  "46374",
  "46394",
  "46403",
  "46426",
  "46427",
  "46429",
  "46453",
  "46456",
  "46471",
  "46474",
  "46477",
  "46479",
  "46493",
  "46496",
  "46507",
  "46518",
  "46526",
  "46539",
  "46543",
  "46557",
  "46564",
  "46572",
  "46576",
  "46577",
  "46582",
  "46586",
  "46587",
  "46594",
  "46600",
  "46604",
  "46610",
  "46620",
  "46621",
  "46628",
  "46637",
  "46640",
  "46643",
  "46649",
  "46658",
  "46663",
  "46665",
  "46668",
  "46669",
  "46682",
  "46694",
  "46707",
  "46709",
  "46710",
  "46734",
  "46742",
  "46743",
  "46752",
  "46755",
  "46759",
  "46762",
  "46769",
  "46782",
  "46789",
  "46807",
  "46809",
  "46811",
  "46815",
  "46817",
  "46818",
  "46828",
  "46845",
  "46860",
  "46875",
  "46876",
  "46878",
  "46883",
  "46901",
  "46903",
  "46910",
  "46934",
  "46950",
  "46959",
  "46961",
  "46965",
  "46973",
  "46984",
  "46988",
  "47000",
  "47007",
  "47008",
  "47009",
  "47022",
  "47030",
  "47035",
  "47037",
  "47039",
  "47045",
  "47046",
  "47088",
  "47104",
  "47111",
  "47113",
  "47114",
  "47124",
  "47130",
  "47154",
  "47155",
  "47169",
  "47182",
  "47193",
  "47206",
  "47209",
  "47220",
  "47224",
  "47225",
  "47227",
  "47230",
  "47233",
  "47236",
  "47239",
  "47240",
  "47241",
  "47244",
  "47249",
  "47250",
  "47251",
  "47254",
  "47262",
  "47270",
  "47272",
  "47291",
  "47314",
  "47316",
  "47319",
  "47335",
  "47337",
  "47341",
  "47349",
  "47354",
  "47366",
  "47367",
  "47382",
  "47390",
  "47399",
  "47404",
  "47407",
  "47413",
  "47422",
  "47427",
  "47429",
  "47430",
  "47433",
  "47454",
  "47457",
  "47482",
  "47494",
  "47500",
  "47504",
  "47533",
  "47567",
  "47568",
  "47576",
  "47582",
  "47584",
  "47590",
  "47594",
  "47596",
  "47605",
  "47606",
  "47620",
  "47636",
  "47648",
  "47660",
  "47672",
  "47711",
  "47737",
  "47746",
  "47755",
  "47772",
  "47787",
  "47808",
  "47822",
  "47823",
  "47831",
  "47851",
  "47857",
  "47859",
  "47870",
  "47879",
  "47882",
  "47890",
  "47892",
  "47904",
  "47906",
  "47907",
  "47920",
  "47923",
  "47926",
  "47928",
  "47931",
  "47932",
  "47936",
  "47942",
  "47949",
  "47953",
  "47957",
  "47971",
  "47974",
  "47975",
  "47976",
  "47988",
  "47990",
  "48001",
  "48006",
  "48013",
  "48018",
  "48020",
  "48024",
  "48026",
  "48030",
  "48037",
  "48040",
  "48048",
  "48052",
  "48059",
  "48060",
  "48061",
  "48073",
  "48087",
  "48090",
  "48091",
  "48109",
  "48118",
  "48122",
  "48123",
  "48125",
  "48130",
  "48131",
  "48138",
  "48142",
  "48147",
  "48151",
  "48156",
  "48157",
  "48158",
  "48166",
  "48177",
  "48181",
  "48185",
  "48186",
  "48190",
  "48201",
  "48202",
  "48224",
  "48230",
  "48236",
  "48240",
  "48245",
  "48254",
  "48255",
  "48265",
  "48266",
  "48272",
  "48295",
  "48296",
  "48302",
  "48305",
  "48308",
  "48317",
  "48318",
  "48332",
  "48338",
  "48339",
  "48349",
  "48358",
  "48362",
  "48364",
  "48367",
  "48390",
  "48392",
  "48394",
  "48395",
  "48396",
  "48409",
  "48418",
  "48431",
  "48448",
  "48460",
  "48466",
  "48467",
  "48473",
  "48492",
  "48500",
  "48503",
  "48518",
  "48521",
  "48522",
  "48526",
  "48530",
  "48532",
  "48546",
  "48549",
  "48559",
  "48592",
  "48595",
  "48600",
  "48602",
  "48608",
  "48610",
  "48616",
  "48618",
  "48626",
  "48628",
  "48667",
  "48675",
  "48681",
  "48685",
  "48689",
  "48696",
  "48705",
  "48709",
  "48711",
  "48716",
  "48717",
  "48726",
  "48727",
  "48732",
  "48734",
  "48742",
  "48756",
  "48759",
  "48764",
  "48776",
  "48805",
  "48819",
  "48820",
  "48827",
  "48831",
  "48851",
  "48855",
  "48864",
  "48866",
  "48867",
  "48872",
  "48881",
  "48905",
  "48943",
  "48953",
  "48961",
  "48982",
  "48991",
  "48999",
  "49004",
  "49006",
  "49008",
  "49017",
  "49026",
  "49042",
  "49045",
  "49058",
  "49076",
  "49082",
  "49098",
  "49099",
  "49102",
  "49120",
  "49121",
  "49128",
  "49135",
  "49150",
  "49163",
  "49164",
  "49180",
  "49184",
  "49190",
  "49200",
  "49202",
  "49205",
  "49219",
  "49229",
  "49236",
  "49240",
  "49247",
  "49269",
  "49274",
  "49275",
  "49283",
  "49297",
  "49310",
  "49312",
  "49314",
  "49322",
  "49327",
  "49328",
  "49335",
  "49345",
  "49351",
  "49356",
  "49360",
  "49384",
  "49417",
  "49422",
  "49423",
  "49429",
  "49431",
  "49433",
  "49439",
  "49443",
  "49447",
  "49485",
  "49490",
  "49511",
  "49516",
  "49519",
  "49528",
  "49544",
  "49547",
  "49558",
  "49582",
  "49610",
  "49616",
  "49619",
  "49623",
  "49629",
  "49645",
  "49662",
  "49666",
  "49680",
  "49702",
  "49703",
  "49704",
  "49706",
  "49725",
  "49739",
  "49746",
  "49753",
  "49754",
  "49759",
  "49783",
  "49796",
  "49797",
  "49798",
  "49801",
  "49805",
  "49808",
  "49812",
  "49822",
  "49839",
  "49845",
  "49868",
  "49870",
  "49886",
  "49888",
  "49892",
  "49894",
  "49905",
  "49914",
  "49921",
  "49926",
  "49938",
  "49953",
  "49966",
  "49970",
  "49975",
  "49979",
  "49985",
  "49991",
  "49993",
  "49998",
  "49999",
  "50006",
  "50010",
  "50026",
  "50035",
  "50046",
  "50054",
  "50058",
  "50059",
  "50065",
  "50070",
  "50075",
  "50085",
  "50087",
  "50088",
  "50109",
  "50120",
  "50134",
  "50140",
  "50141",
  "50145",
  "50163",
  "50180",
  "50183",
  "50185",
  "50192",
  "50210",
  "50214",
  "50219",
  "50223",
  "50224",
  "50225",
  "50254",
  "50261",
  "50268",
  "50290",
  "50300",
  "50311",
  "50320",
  "50327",
  "50341",
  "50352",
  "50358",
  "50363",
  "50381",
  "50406",
  "50421",
  "50427",
  "50434",
  "50445",
  "50450",
  "50451",
  "50452",
  "50457",
  "50463",
  "50482",
  "50485",
  "50488",
  "50489",
  "50494",
  "50501",
  "50509",
  "50516",
  "50518",
  "50520",
  "50521",
  "50529",
  "50545",
  "50547",
  "50548",
  "50554",
  "50556",
  "50565",
  "50569",
  "50570",
  "50571",
  "50580",
  "50584",
  "50587",
  "50597",
  "50605",
  "50618",
  "50626",
  "50632",
  "50633",
  "50640",
  "50652",
  "50653",
  "50654",
  "50667",
  "50670",
  "50685",
  "50686",
  "50687",
  "50691",
  "50697",
  "50699",
  "50704",
  "50712",
  "50713",
  "50724",
  "50728",
  "50755",
  "50761",
  "50770",
  "50772",
  "50776",
  "50779",
  "50780",
  "50794",
  "50806",
  "50812",
  "50815",
  "50816",
  "50820",
  "50821",
  "50824",
  "50832",
  "50836",
  "50844",
  "50858",
  "50867",
  "50868",
  "50871",
  "50872",
  "50879",
  "50884",
  "50887",
  "50890",
  "50891",
  "50900",
  "50905",
  "50908",
  "50917",
  "50932",
  "50933",
  "50935",
  "50958",
  "50959",
  "50969",
  "50980",
  "50987",
  "50988",
  "50997",
  "51000",
  "51010",
  "51011",
  "51015",
  "51023",
  "51029",
  "51039",
  "51048",
  "51058",
  "51073",
  "51076",
  "51086",
  "51090",
  "51101",
  "51106",
  "51128",
  "51133",
  "51166",
  "51168",
  "51174",
  "51202",
  "51207",
  "51223",
  "51224",
  "51231",
  "51237",
  "51243",
  "51274",
  "51282",
  "51283",
  "51287",
  "51297",
  "51327",
  "51331",
  "51341",
  "51353",
  "51357",
  "51366",
  "51369",
  "51371",
  "51374",
  "51377",
  "51378",
  "51379",
  "51393",
  "51398",
  "51399",
  "51400",
  "51409",
  "51414",
  "51419",
  "51425",
  "51442",
  "51449",
  "51453",
  "51456",
  "51490",
  "51504",
  "51505",
  "51515",
  "51520",
  "51521",
  "51526",
  "51534",
  "51535",
  "51544",
  "51545",
  "51546",
  "51548",
  "51553",
  "51554",
  "51557",
  "51562",
  "51565",
  "51569",
  "51590",
  "51591",
  "51594",
  "51600",
  "51609",
  "51613",
  "51629",
  "51637",
  "51651",
  "51673",
  "51691",
  "51697",
  "51707",
  "51711",
  "51721",
  "51723",
  "51728",
  "51733",
  "51746",
  "51762",
  "51763",
  "51764",
  "51765",
  "51778",
  "51790",
  "51816",
  "51840",
  "51841",
  "51845",
  "51847",
  "51863",
  "51882",
  "51883",
  "51895",
  "51896",
  "51899",
  "51913",
  "51925",
  "51942",
  "51954",
  "51972",
  "51998",
  "52002",
  "52015",
  "52022",
  "52035",
  "52036",
  "52037",
  "52040",
  "52042",
  "52096",
  "52099",
  "52126",
  "52154",
  "52155",
  "52200",
  "52213",
  "52218",
  "52251",
  "52255",
  "52270",
  "52274",
  "52277",
  "52279",
  "52281",
  "52288",
  "52292",
  "52299",
  "52300",
  "52303",
  "52315",
  "52321",
  "52343",
  "52357",
  "52358",
  "52378",
  "52382",
  "52387",
  "52393",
  "52397",
  "52433",
  "52435",
  "52449",
  "52455",
  "52464",
  "52471",
  "52479",
  "52481",
  "52486",
  "52492",
  "52496",
  "52505",
  "52526",
  "52528",
  "52532",
  "52534",
  "52538",
  "52540",
  "52555",
  "52561",
  "52563",
  "52581",
  "52582",
  "52586",
  "52601",
  "52611",
  "52613",
  "52657",
  "52677",
  "52681",
  "52686",
  "52693",
  "52701",
  "52709",
  "52714",
  "52754",
  "52760",
  "52771",
  "52773",
  "52782",
  "52800",
  "52804",
  "52805",
  "52808",
  "52823",
  "52828",
  "52829",
  "52837",
  "52847",
  "52853",
  "52867",
  "52881",
  "52892",
  "52919",
  "52931",
  "52932",
  "52936",
  "52937",
  "52946",
  "52953",
  "52973",
  "52981",
  "52992",
  "52998",
  "53000",
  "53001",
  "53008",
  "53011",
  "53015",
  "53017",
  "53026",
  "53031",
  "53034",
  "53040",
  "53041",
  "53045",
  "53051",
  "53052",
  "53055",
  "53056",
  "53068",
  "53074",
  "53088",
  "53097",
  "53109",
  "53110",
  "53116",
  "53123",
  "53126",
  "53137",
  "53142",
  "53163",
  "53174",
  "53175",
  "53190",
  "53196",
  "53199",
  "53203",
  "53230",
  "53237",
  "53258",
  "53263",
  "53264",
  "53266",
  "53274",
  "53275",
  "53283",
  "53284",
  "53289",
  "53292",
  "53304",
  "53305",
  "53319",
  "53320",
  "53323",
  "53326",
  "53340",
  "53342",
  "53346",
  "53353",
  "53357",
  "53362",
  "53376",
  "53390",
  "53397",
  "53401",
  "53403",
  "53405",
  "53416",
  "53417",
  "53418",
  "53436",
  "53438",
  "53451",
  "53457",
  "53462",
  "53464",
  "53465",
  "53490",
  "53496",
  "53502",
  "53505",
  "53513",
  "53530",
  "53547",
  "53551",
  "53553",
  "53557",
  "53563",
  "132187",
  "132460",
  "132837",
  "133040",
  "133491",
  "133519",
  "133659",
  "133955",
  "134191",
  "134336",
  "134480",
  "134502",
  "134916",
  "134951",
  "135081"
]

@app.route("/api/get_samples_option", methods=["GET"])
def get_samples_option_route():
    """
    Get a list of available samples for the selector, grouped by cell scale(e.g., 2um, 8um)
    """
    return jsonify(get_samples_option())


@app.route("/api/load_adata_cache", methods=["POST"])
def load_adata_cache_route():
    """
    Load AnnData objects for the given sample IDs into the global cache.
    This should be called once when samples are confirmed.
    """
    sample_ids = request.json["sample_ids"]
    try:
        load_adata_to_cache(sample_ids)
        return jsonify({"status": "success", "message": f"Loaded AnnData for {len(sample_ids)} samples"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/clear_adata_cache", methods=["POST"])
def clear_adata_cache_route():
    """
    Clear the global AnnData cache to free memory.
    """
    try:
        clear_adata_cache()
        return jsonify({"status": "success", "message": "AnnData cache cleared"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_hires_image_size", methods=["POST"])
def get_hires_image_size_route():
    """
    Get high-resolution image size for the selected samples
    """
    sample_ids = request.json["sample_ids"]
    return jsonify(get_hires_image_size(sample_ids))


@app.route("/api/get_coordinates", methods=["POST"])
def get_coordinates_route():
    """
    Get coordinates for the selected samples
    """
    sample_ids = request.json["sample_ids"]
    return jsonify(get_coordinates(sample_ids))


@app.route("/api/get_gene_list", methods=["POST"])
def get_gene_list_route():
    """
    Get list of all genes for the selected samples
    """
    sample_ids = request.json["sample_ids"]
    return jsonify(get_gene_list(sample_ids))


@app.route("/api/get_highly_variable_genes", methods=["POST"])
def get_highly_variable_genes_route():
    """
    Get list of highly variable genes for the selected samples
    """
    sample_ids = request.json["sample_ids"]
    top_n = request.json.get("top_n", 20)  # Default to top 20
    return jsonify(get_highly_variable_genes(sample_ids, top_n))


@app.route("/api/get_kosara_data", methods=["POST"])
def get_kosara_data_route():
    """
    Get Kosara visualization format data
    """
    sample_ids = request.json["sample_ids"]
    gene_list = request.json["gene_list"]
    # Make cell_list optional; default to all cells when not provided
    cell_list = request.json.get("cell_list", cell_ids)
    return jsonify(get_kosara_data(sample_ids, gene_list, cell_list))


@app.route("/api/get_selected_region_data", methods=["POST"])
def get_selected_region_data_route():
    """
    Get gene expression data for the selected regions
    """
    sample_id = request.json["sample_id"]
    cell_list = request.json["cell_list"]
    return jsonify(get_selected_region_data(sample_id, cell_list))


@app.route("/api/get_umap_data", methods=["POST"])
def get_umap_data_route():
    """
    Generate UMAP data from gene expression data
    """
    sample_id = request.json["sample_id"]
    cell_ids = request.json.get("cell_ids", None)  # New parameter for specific cells
    n_neighbors = request.json.get("n_neighbors", 10)
    n_pcas = request.json.get("n_pcas", 30)
    resolutions = request.json.get("resolutions", 1)
    adata_umap_title = request.json.get("adata_umap_title", None)
    try:
        umap_data = get_umap_data(
            sample_id=sample_id,
            cell_ids=cell_ids,  # Pass cell_ids to the backend function
            n_neighbors=n_neighbors,
            n_pcas=n_pcas,
            resolutions=resolutions,
            adata_umap_title=adata_umap_title
        )
        return jsonify(umap_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_go_analysis", methods=["POST"])
def get_go_analysis_route():
    """
    Perform GO analysis on selected cluster cells
    """
    sample_id = request.json["sample_id"]
    cluster_id = request.json["cluster_id"]
    adata_umap_title = request.json["adata_umap_title"]

    try:
        go_results = perform_go_analysis(
            sample_id=sample_id,
            cluster_id=cluster_id,
            adata_umap_title=adata_umap_title
        )
        return jsonify(go_results)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_trajectory_gene_list", methods=["POST"])
def get_trajectory_gene_list_route():
    """
    Get list of available genes from trajectory data
    """
    sample_id = request.json["sample_id"]
    is_vertical = request.json.get("is_vertical")

    try:
        gene_list = get_trajectory_gene_list(sample_id=sample_id, is_vertical=is_vertical)
        return jsonify(gene_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_trajectory_data", methods=["POST"])
def get_trajectory_data_route():
    """
    Get trajectory gene expression data for line chart visualization
    """
    sample_id = request.json["sample_id"]
    selected_genes = request.json.get("selected_genes", None)
    is_vertical = request.json.get("is_vertical")

    try:
        trajectory_data = get_trajectory_data(sample_id=sample_id, selected_genes=selected_genes, is_vertical=is_vertical)
        return jsonify(trajectory_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_gene_name_search", methods=["POST"])
def get_gene_name_search():
    """
    Search for gene names based on a query string and return matching gene names.
    """
    sample_id = request.json["sample_id"]
    gene_name = request.json["gene_name"]

    if not gene_name or len(gene_name) < 2:
        return jsonify([])

    sample_gene_dict = get_gene_list([sample_id])

    if sample_id not in sample_gene_dict:
        return jsonify([])

    gene_list = sample_gene_dict[sample_id]

    # Filter genes that match the search query
    pattern = re.compile(re.escape(gene_name), re.IGNORECASE)
    matching_genes = [gene for gene in gene_list if pattern.search(gene)]

    return jsonify(matching_genes)


@app.route("/api/get_cell_types", methods=["POST"])
def get_cell_types():
    """
    Get cell types and their counts from adata.obs['predicted_labels'].value_counts()
    """
    sample_ids = request.json["sample_ids"]
    
    if not sample_ids:
        return jsonify({"error": "No sample IDs provided"}), 400
    
    try:
        cell_types_data = get_cell_types_data(sample_ids)
        return jsonify(cell_types_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_hires_image", methods=["POST"])
def get_hires_image_route():
    """
    Return the full high-resolution image for the given sample_id as JPEG.
    """
    sample_id = request.json["sample_id"]

    if sample_id not in SAMPLES:
        return jsonify({"error": f"Sample {sample_id} not found"}), 404

    image_path = SAMPLES[sample_id]["image_jpeg_path"]

    return send_file(image_path, mimetype="image/jpeg", as_attachment=False)


@app.route("/api/get_cell_boundary_image", methods=["POST"])
def get_cell_boundary_image_route():
    """
    Return the cell boundary image for the given sample_id as PNG.
    """
    sample_id = request.json["sample_id"]

    if sample_id not in SAMPLES:
        return jsonify({"error": f"Sample {sample_id} not found"}), 404

    cell_boundary_path = SAMPLES[sample_id]["cell_boundary_path"]

    return send_file(cell_boundary_path, mimetype="image/png", as_attachment=False)


@app.route("/api/upload_spaceranger", methods=["POST"])
def upload_spaceranger():
    """
    Upload Spaceranger output files and save them in the appropriate directory structure.
    """
    name = request.form.get("name")
    files = request.files.getlist("files")

    focus_patterns = [
        re.compile(r"binned_outputs/square_002um/filtered_feature_bc_matrix\.h5$"),
        re.compile(r"binned_outputs/square_008um/filtered_feature_bc_matrix\.h5$"),
        re.compile(r"binned_outputs/square_016um/filtered_feature_bc_matrix\.h5$"),
        re.compile(r"spatial/"),
    ]

    for file in files:
        rel_path = file.filename

        subdir = None
        for pattern in focus_patterns:
            if pattern.search(rel_path):
                if "binned_outputs/square_002um" in rel_path:
                    subdir = "binned_outputs/square_002um"
                elif "binned_outputs/square_008um" in rel_path:
                    subdir = "binned_outputs/square_008um"
                elif "binned_outputs/square_016um" in rel_path:
                    subdir = "binned_outputs/square_016um"
                elif "spatial/" in rel_path:

                    subdir = os.path.join(
                        "spatial", os.path.relpath(rel_path, start="spatial")
                    )
                break
        if subdir:
            if subdir.startswith("spatial"):
                save_path = os.path.join(UPLOAD_FOLDER, name, subdir)
            else:
                save_path = os.path.join(
                    UPLOAD_FOLDER, name, subdir, os.path.basename(rel_path)
                )
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            file.save(save_path)

    return jsonify({"status": "success"})


@app.route("/api/get_pseudotime_data", methods=["POST"])
def get_pseudotime_data_route():
    """
    Generate pseudotime analysis data using Slingshot trajectory inference
    """
    sample_id = request.json["sample_id"]
    cell_ids = request.json["cell_ids"]
    adata_umap_title = request.json["adata_umap_title"]
    early_markers = request.json.get("early_markers", None)
    n_neighbors = request.json.get("n_neighbors", 15)
    n_pcas = request.json.get("n_pcas", 30)
    resolutions = request.json.get("resolutions", 1)
    
    try:
        pseudotime_data = get_pseudotime_data(
            sample_id=sample_id,
            adata_umap_title=adata_umap_title,
            cell_ids=cell_ids,
            early_markers=early_markers,
            n_neighbors=n_neighbors,
            n_pcas=n_pcas,
            resolutions=resolutions
        )
        return jsonify(pseudotime_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/get_trajectory_gene_expression", methods=["POST"])
def get_trajectory_gene_expression_route():
    """
    Get gene expression data along a specific trajectory path
    """
    sample_id = request.json["sample_id"]
    adata_umap_title = request.json["adata_umap_title"]
    gene_names = request.json["gene_names"]
    trajectory_path = request.json["trajectory_path"]
    
    try:
        gene_expression_data = get_trajectory_gene_expression(
            sample_id=sample_id,
            adata_umap_title=adata_umap_title,
            gene_names=gene_names,
            trajectory_path=trajectory_path
        )
        return jsonify(gene_expression_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True, port=5003)
